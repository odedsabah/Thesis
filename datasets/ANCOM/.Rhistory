zero.cut, lib.cut, neg.lb)
pre.process=feature_table_pre_process(feature.table, meta.data[, 8:ncol(meta.data)], "Sample_ID", "Disease",
zero.cut, lib.cut, neg.lb)
pre.process=feature_table_pre_process(feature.table, meta.data, "Sample_ID", "Disease",
zero.cut, lib.cut, neg.lb)
pre.process=feature_table_pre_process(feature.table[8:nrow(feature.table),] , meta.data[, 8:ncol(meta.data)], "Sample_ID", "Disease",
zero.cut, lib.cut, neg.lb)
View(feature.table[-c("Sex", "Age", "BMI", "Country", "Source"),])
pre.process=feature_table_pre_process(feature.table[-c("Sex", "Age", "BMI", "Country", "Source"),] , meta.data[, -c("Sex", "Age", "BMI", "Country", "Source")], "Sample_ID", "Disease",
zero.cut, lib.cut, neg.lb)
feature_table_processed <- feature.table %>%
select(-c(Sex, Age, BMI, Country, Source))
feature.table
America_non <- meta_data %>% filter(Country_gro%in%c("America"),(Disease%in%c("nonIBD")))
Europe_non <- meta_data %>% filter(Country_gro%in%c("Europe"),(Disease%in%c("nonIBD")))
IBD_1000_amcom <- meta_data %>% filter(Source%in%c("IBD_1000"), (Disease%in%c("CD", "UC")))
IBD_1000_amcom <- bind_rows(IBD_1000_amcom, Europe_non)
IBD_1000_amcom <- IBD_1000_amcom |> mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
Eran_Elinav_amcom_America <- meta_data %>% filter(Source%in%c("Eran_Elinav"), Country_gro%in%c("America"), (Disease%in%c("CD", "UC")))
Eran_Elinav_amcom_Europe <- meta_data %>% filter(Source%in%c("Eran_Elinav"), Country_gro%in%c("Europe"), (Disease%in%c("CD", "UC")))
Eran_Elinav_amcom_America <- bind_rows(Eran_Elinav_amcom_America, America_non)
Eran_Elinav_amcom_America <- Eran_Elinav_amcom_America |> mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
Eran_Elinav_amcom_Europe <- bind_rows(Eran_Elinav_amcom_Europe, Europe_non)
Eran_Elinav_amcom_Europe <- Eran_Elinav_amcom_Europe |> mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
HMP2_pilot_ancom <- meta_data %>% filter(Source%in%c("HMP2_pilot"), (Disease%in%c("CD", "UC")))
HMP2_pilot_ancom <- bind_rows(HMP2_pilot_ancom, America_non)
HMP2_pilot_ancom <- HMP2_pilot_ancom |> mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
ibdmdb_ancom <- meta_data %>% filter(Source%in%c("ibdmdb"), (Disease%in%c("CD", "UC")))
ibdmdb_ancom <- bind_rows(ibdmdb_ancom, America_non)
ibdmdb_ancom <- ibdmdb_ancom |> mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
ibdmdb2_ancom <- meta_data %>% filter(Source%in%c("ibdmdb2"), (Disease%in%c("CD", "UC")))
ibdmdb2_ancom <- bind_rows(ibdmdb2_ancom, America_non)
ibdmdb2_ancom <- ibdmdb2_ancom |> mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
Lewis_ancom <- meta_data %>% filter(Source%in%c("Lewis"), (Disease%in%c("CD")))
Lewis_ancom <- bind_rows(Lewis_ancom, America_non)
Lewis_ancom <- Lewis_ancom |> mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
MetaHit_ancom <- meta_data %>% filter(Source%in%c("MetaHit"), (Disease%in%c("CD", "UC")))
MetaHit_ancom <- bind_rows(MetaHit_ancom, Europe_non)
MetaHit_ancom <- MetaHit_ancom |> mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
MetaHit2_ancom <- meta_data %>% filter(Source%in%c("MetaHit2"), (Disease%in%c("CD", "UC")))
MetaHit2_ancom <- bind_rows(MetaHit2_ancom, Europe_non)
MetaHit2_ancom <- MetaHit2_ancom |> mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
PRISM_ancom <- meta_data %>% filter(Source%in%c("PRISM"), (Disease%in%c("CD", "UC")))
PRISM_ancom <- bind_rows(PRISM_ancom, America_non)
PRISM_ancom <- PRISM_ancom |> mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
df_list <- list(IBD_1000_amcom = IBD_1000_amcom,
Eran_Elinav_amcom_America = Eran_Elinav_amcom_America,
Eran_Elinav_amcom_Europe = Eran_Elinav_amcom_Europe,
HMP2_pilot_ancom = HMP2_pilot_ancom,
ibdmdb_ancom = ibdmdb_ancom,
ibdmdb2_ancom = ibdmdb2_ancom,
Lewis_ancom = Lewis_ancom,
MetaHit_ancom = MetaHit_ancom,
MetaHit2_ancom = MetaHit2_ancom,
PRISM_ancom = PRISM_ancom)
# Apply the selection operation to each data frame in the list
df_list <- lapply(df_list, function(df) {
df |> select(where(~ !all(.x == 0, na.rm = TRUE)))
})
list2env(df_list, envir = .GlobalEnv)
#View(df_list$MetaHit2_ancom)
feature.table <- lapply(df_list, function(df) {
# Convert columns (except the first 9) to numeric
df[, -c(1:9)] <- lapply(df[, -c(1:9)], function(x) as.numeric(as.character(x)))
# Transpose the data frame
transposed_df <- t(df)
# Convert the transposed matrix back to a data frame
transposed_df <- as.data.frame(transposed_df, stringsAsFactors = FALSE)
# Remove columns where all values are 0
cleaned_df <- transposed_df %>%
select(where(~ !all(.x == 0, na.rm = TRUE)))
return(cleaned_df)
})
# Update the environment with transposed data frames
list2env(feature.table, envir = .GlobalEnv)
df_list$IBD_1000_amcom$Disease <- as.character(df_list$IBD_1000_amcom$Disease)
pander(table(df_list$IBD_1000_amcom$Disease))
df_list$IBD_1000_amcom$Sample_ID=seq(nrow(df_list$IBD_1000_amcom))
colnames(feature.table$IBD_1000_amcom)=seq(nrow(df_list$IBD_1000_amcom))
meta.data <- as.data.frame(df_list$IBD_1000_amcom)
feature.table <- as.data.frame(feature.table$IBD_1000_amcom)
meta.data$Sample_ID=seq(nrow(meta.data))
colnames(feature.table)=seq(nrow(meta.data))
dim(meta.data)
dim(feature.table)
zero.cut=0.90; lib.cut=1000; neg.lb=TRUE
feature_table_processed <- feature.table[setdiff(rownames(feature.table), c("Sex", "Age", "BMI", "Country", "Source")), ]
# Preprocess meta.data by excluding specified columns
meta_data_processed <- meta.data %>%
select(-c(Sex, Age, BMI, Country, Source))
# Assuming your function feature_table_pre_process is defined elsewhere and ready to use
pre.process <- feature_table_pre_process(
feature_table_processed,
meta_data_processed,
"Sample_ID",
"Disease",
zero.cut,
lib.cut,
neg.lb
)
feature_table_processed
View(feature_table_processed)
View(meta_data_processed)
# Assuming your function feature_table_pre_process is defined elsewhere and ready to use
pre.process <- feature_table_pre_process(
feature_table_processed,
meta_data_processed,
"Sample_ID",
"Disease",
zero.cut,
lib.cut,
neg.lb
)
America_non <- meta_data %>% filter(Country_gro%in%c("America"),(Disease%in%c("nonIBD")))
Europe_non <- meta_data %>% filter(Country_gro%in%c("Europe"),(Disease%in%c("nonIBD")))
IBD_1000_amcom <- meta_data %>% filter(Source%in%c("IBD_1000"), (Disease%in%c("CD", "UC")))
IBD_1000_amcom <- bind_rows(IBD_1000_amcom, Europe_non)
IBD_1000_amcom <- IBD_1000_amcom |> mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
Eran_Elinav_amcom_America <- meta_data %>% filter(Source%in%c("Eran_Elinav"), Country_gro%in%c("America"), (Disease%in%c("CD", "UC")))
Eran_Elinav_amcom_Europe <- meta_data %>% filter(Source%in%c("Eran_Elinav"), Country_gro%in%c("Europe"), (Disease%in%c("CD", "UC")))
Eran_Elinav_amcom_America <- bind_rows(Eran_Elinav_amcom_America, America_non)
Eran_Elinav_amcom_America <- Eran_Elinav_amcom_America |> mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
Eran_Elinav_amcom_Europe <- bind_rows(Eran_Elinav_amcom_Europe, Europe_non)
Eran_Elinav_amcom_Europe <- Eran_Elinav_amcom_Europe |> mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
HMP2_pilot_ancom <- meta_data %>% filter(Source%in%c("HMP2_pilot"), (Disease%in%c("CD", "UC")))
HMP2_pilot_ancom <- bind_rows(HMP2_pilot_ancom, America_non)
HMP2_pilot_ancom <- HMP2_pilot_ancom |> mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
ibdmdb_ancom <- meta_data %>% filter(Source%in%c("ibdmdb"), (Disease%in%c("CD", "UC")))
ibdmdb_ancom <- bind_rows(ibdmdb_ancom, America_non)
ibdmdb_ancom <- ibdmdb_ancom |> mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
ibdmdb2_ancom <- meta_data %>% filter(Source%in%c("ibdmdb2"), (Disease%in%c("CD", "UC")))
ibdmdb2_ancom <- bind_rows(ibdmdb2_ancom, America_non)
ibdmdb2_ancom <- ibdmdb2_ancom |> mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
Lewis_ancom <- meta_data %>% filter(Source%in%c("Lewis"), (Disease%in%c("CD")))
Lewis_ancom <- bind_rows(Lewis_ancom, America_non)
Lewis_ancom <- Lewis_ancom |> mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
MetaHit_ancom <- meta_data %>% filter(Source%in%c("MetaHit"), (Disease%in%c("CD", "UC")))
MetaHit_ancom <- bind_rows(MetaHit_ancom, Europe_non)
MetaHit_ancom <- MetaHit_ancom |> mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
MetaHit2_ancom <- meta_data %>% filter(Source%in%c("MetaHit2"), (Disease%in%c("CD", "UC")))
MetaHit2_ancom <- bind_rows(MetaHit2_ancom, Europe_non)
MetaHit2_ancom <- MetaHit2_ancom |> mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
PRISM_ancom <- meta_data %>% filter(Source%in%c("PRISM"), (Disease%in%c("CD", "UC")))
PRISM_ancom <- bind_rows(PRISM_ancom, America_non)
PRISM_ancom <- PRISM_ancom |> mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
df_list <- list(IBD_1000_amcom = IBD_1000_amcom,
Eran_Elinav_amcom_America = Eran_Elinav_amcom_America,
Eran_Elinav_amcom_Europe = Eran_Elinav_amcom_Europe,
HMP2_pilot_ancom = HMP2_pilot_ancom,
ibdmdb_ancom = ibdmdb_ancom,
ibdmdb2_ancom = ibdmdb2_ancom,
Lewis_ancom = Lewis_ancom,
MetaHit_ancom = MetaHit_ancom,
MetaHit2_ancom = MetaHit2_ancom,
PRISM_ancom = PRISM_ancom)
# Apply the selection operation to each data frame in the list
df_list <- lapply(df_list, function(df) {
df |> select(where(~ !all(.x == 0, na.rm = TRUE)))
})
list2env(df_list, envir = .GlobalEnv)
#View(df_list$MetaHit2_ancom)
feature.table <- lapply(df_list, function(df) {
# Convert columns (except the first 9) to numeric
df[, -c(1:9)] <- lapply(df[, -c(1:9)], function(x) as.numeric(as.character(x)))
# Transpose the data frame
transposed_df <- t(df)
# Convert the transposed matrix back to a data frame
transposed_df <- as.data.frame(transposed_df, stringsAsFactors = FALSE)
# Remove columns where all values are 0
cleaned_df <- transposed_df %>%
select(where(~ !all(.x == 0, na.rm = TRUE)))
return(cleaned_df)
})
# Update the environment with transposed data frames
list2env(feature.table, envir = .GlobalEnv)
meta.data <- df_list$IBD_1000_amcom
meta.data$Disease <- as.character(meta.data$Disease )
pander(table(meta.data$Disease))
obs.abn <- feature.table$IBD_1000_amcom
obs.abn
View(obs.abn)
obs.abn <- feature.table$IBD_1000_amcom[9:nrow(feature.table$IBD_1000_amcom),]
View(obs.abn)
obs.abn=obs.abn[, meta.data$Sample_ID]
meta.data
obs.abn=obs.abn[, meta.data$Sample_ID]
meta.data <- df_list$IBD_1000_amcom
meta.data$Disease <- as.character(meta.data$Disease )
pander(table(meta.data$Disease))
obs.abn <- feature.table$IBD_1000_amcom[9:nrow(feature.table$IBD_1000_amcom),]
View(obs.abn)
obs.abn=obs.abn[, meta.data$Sample_ID]
meta.data$Sample_ID
View(meta.data)
meta.data$Sample_ID=seq(nrow(meta.data))
colnames(obs.abn)=seq(nrow(meta.data))
feature.table=obs.abn; sample.var="Sample.ID"; group.var="diagnosis";
feature.table=obs.abn; sample.var="Sample_ID"; group.var="Disease";
feature.table
View(feature.table)
feature.table=obs.abn; sample.var="Sample_ID"; group.var="Disease";
feature.table[is.na(feature.table)] = 0
pre.process=feature_table_pre_process(feature.table, meta.data, sample.var, group.var,
zero.cut, lib.cut, neg.lb)
feature.table *1
feature.table *1
feature.table <- lapply(feature.table, function(x) {
if (is.numeric(x)) {
# If the column is numeric, replace NA with 0
x[is.na(x)] <- 0
return(x)
} else {
# If the column is not numeric, attempt to convert it to numeric
numeric_x <- as.numeric(as.character(x))
# If conversion is successful but results in NAs (due to conversion failure), keep original
if (any(is.na(numeric_x))) {
return(x) # Return original non-convertible column unchanged
} else {
return(numeric_x) # Return converted column
}
}
})
class(feature.table)
feature.table <- as.data.frame(lapply(feature.table, function(x) {
if (is.numeric(x)) {
# If the column is numeric, replace NA with 0
x[is.na(x)] <- 0
return(x)
} else {
# If the column is not numeric, attempt to convert it to numeric
numeric_x <- as.numeric(as.character(x))
# If conversion is successful but results in NAs (due to conversion failure), keep original
if (any(is.na(numeric_x))) {
return(x) # Return original non-convertible column unchanged
} else {
return(numeric_x) # Return converted column
}
}
}))
meta.data <- df_list$IBD_1000_amcom
meta.data$Disease <- as.character(meta.data$Disease )
pander(table(meta.data$Disease))
obs.abn <- feature.table$IBD_1000_amcom[9:nrow(feature.table$IBD_1000_amcom),]
View(obs.abn)
meta.data$Sample_ID=seq(nrow(meta.data))
colnames(obs.abn)=seq(nrow(meta.data))
dim(meta.data)
dim(feature.table)
feature.table=obs.abn; sample.var="Sample_ID"; group.var="Disease";
feature.table <- as.data.frame(lapply(feature.table, function(x) {
if (is.numeric(x)) {
# If the column is numeric, replace NA with 0
x[is.na(x)] <- 0
return(x)
} else {
# If the column is not numeric, attempt to convert it to numeric
numeric_x <- as.numeric(as.character(x))
# If conversion is successful but results in NAs (due to conversion failure), keep original
if (any(is.na(numeric_x))) {
return(x) # Return original non-convertible column unchanged
} else {
return(numeric_x) # Return converted column
}
}
}))
zero.cut=0.90; lib.cut=1000; neg.lb=TRUE
pre.process=feature_table_pre_process(feature.table, meta.data, sample.var, group.var,
zero.cut, lib.cut, neg.lb)
feature.table=obs.abn; sample.var="Sample_ID"; group.var="Disease";
feature.table <- feature.table %>%
mutate(across(where(is.numeric), ~replace_na(., 0))) # Replace NA with 0 in numeric columns
# This step assumes you want to ensure columns are numeric and then perform an operation
feature.table[] <- lapply(feature.table, function(x) {
if(is.character(x) || is.factor(x)) {
# Attempt to convert to numeric, which will introduce NA for non-numeric values
numeric_x <- suppressWarnings(as.numeric(as.character(x)))
if(!any(is.na(numeric_x))) {
return(numeric_x) # Conversion successful, return numeric
} else {
return(x) # Conversion introduced NAs, return original
}
} else {
return(x * 1) # Perform the multiplication for numeric columns
}
})
zero.cut=0.90; lib.cut=1000; neg.lb=TRUE
pre.process=feature_table_pre_process(feature.table, meta.data, sample.var, group.var,
zero.cut, lib.cut, neg.lb)
feature.table=obs.abn; sample.var="Sample_ID"; group.var="Disease";
feature.table <- feature.table %>%
mutate(across(where(is.numeric), ~replace_na(., 0))) # Replace NA with 0 in numeric columns
feature.table *1
meta.data <- df_list$IBD_1000_amcom
meta.data$Disease <- as.character(meta.data$Disease )
pander(table(meta.data$Disease))
obs.abn <- feature.table$IBD_1000_amcom[9:nrow(feature.table$IBD_1000_amcom),]
View(obs.abn)
meta.data$Sample_ID=seq(nrow(meta.data))
colnames(obs.abn)=seq(nrow(meta.data))
dim(meta.data)
dim(feature.table)
feature.table=obs.abn; sample.var="Sample_ID"; group.var="Disease";
class(feature.table$1)
feature.table = as.data.frame(sapply(feature.table, as.numeric))
zero.cut=0.90; lib.cut=1000; neg.lb=TRUE
pre.process=feature_table_pre_process(feature.table, meta.data, sample.var, group.var,
zero.cut, lib.cut, neg.lb)
dim(meta.data)
dim(feature.table)
meta.data <- df_list$IBD_1000_amcom
meta.data$Disease <- as.character(meta.data$Disease )
pander(table(meta.data$Disease))
obs.abn <- feature.table$IBD_1000_amcom
meta.data$Sample_ID=seq(nrow(meta.data))
colnames(obs.abn)=seq(nrow(meta.data))
meta.data <- df_list$IBD_1000_amcom
meta.data$Disease <- as.character(meta.data$Disease )
pander(table(meta.data$Disease))
obs.abn <- feature.table$IBD_1000_amcom
meta.data$Sample_ID=seq(nrow(meta.data))
colnames(obs.abn)=seq(nrow(meta.data))
America_non <- meta_data %>% filter(Country_gro%in%c("America"),(Disease%in%c("nonIBD")))
Europe_non <- meta_data %>% filter(Country_gro%in%c("Europe"),(Disease%in%c("nonIBD")))
IBD_1000_amcom <- meta_data %>% filter(Source%in%c("IBD_1000"), (Disease%in%c("CD", "UC")))
IBD_1000_amcom <- bind_rows(IBD_1000_amcom, Europe_non)
IBD_1000_amcom <- IBD_1000_amcom |> mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
Eran_Elinav_amcom_America <- meta_data %>% filter(Source%in%c("Eran_Elinav"), Country_gro%in%c("America"), (Disease%in%c("CD", "UC")))
Eran_Elinav_amcom_Europe <- meta_data %>% filter(Source%in%c("Eran_Elinav"), Country_gro%in%c("Europe"), (Disease%in%c("CD", "UC")))
Eran_Elinav_amcom_America <- bind_rows(Eran_Elinav_amcom_America, America_non)
Eran_Elinav_amcom_America <- Eran_Elinav_amcom_America |> mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
Eran_Elinav_amcom_Europe <- bind_rows(Eran_Elinav_amcom_Europe, Europe_non)
Eran_Elinav_amcom_Europe <- Eran_Elinav_amcom_Europe |> mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
HMP2_pilot_ancom <- meta_data %>% filter(Source%in%c("HMP2_pilot"), (Disease%in%c("CD", "UC")))
HMP2_pilot_ancom <- bind_rows(HMP2_pilot_ancom, America_non)
HMP2_pilot_ancom <- HMP2_pilot_ancom |> mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
ibdmdb_ancom <- meta_data %>% filter(Source%in%c("ibdmdb"), (Disease%in%c("CD", "UC")))
ibdmdb_ancom <- bind_rows(ibdmdb_ancom, America_non)
ibdmdb_ancom <- ibdmdb_ancom |> mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
ibdmdb2_ancom <- meta_data %>% filter(Source%in%c("ibdmdb2"), (Disease%in%c("CD", "UC")))
ibdmdb2_ancom <- bind_rows(ibdmdb2_ancom, America_non)
ibdmdb2_ancom <- ibdmdb2_ancom |> mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
Lewis_ancom <- meta_data %>% filter(Source%in%c("Lewis"), (Disease%in%c("CD")))
Lewis_ancom <- bind_rows(Lewis_ancom, America_non)
Lewis_ancom <- Lewis_ancom |> mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
MetaHit_ancom <- meta_data %>% filter(Source%in%c("MetaHit"), (Disease%in%c("CD", "UC")))
MetaHit_ancom <- bind_rows(MetaHit_ancom, Europe_non)
MetaHit_ancom <- MetaHit_ancom |> mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
MetaHit2_ancom <- meta_data %>% filter(Source%in%c("MetaHit2"), (Disease%in%c("CD", "UC")))
MetaHit2_ancom <- bind_rows(MetaHit2_ancom, Europe_non)
MetaHit2_ancom <- MetaHit2_ancom |> mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
PRISM_ancom <- meta_data %>% filter(Source%in%c("PRISM"), (Disease%in%c("CD", "UC")))
PRISM_ancom <- bind_rows(PRISM_ancom, America_non)
PRISM_ancom <- PRISM_ancom |> mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
df_list <- list(IBD_1000_amcom = IBD_1000_amcom,
Eran_Elinav_amcom_America = Eran_Elinav_amcom_America,
Eran_Elinav_amcom_Europe = Eran_Elinav_amcom_Europe,
HMP2_pilot_ancom = HMP2_pilot_ancom,
ibdmdb_ancom = ibdmdb_ancom,
ibdmdb2_ancom = ibdmdb2_ancom,
Lewis_ancom = Lewis_ancom,
MetaHit_ancom = MetaHit_ancom,
MetaHit2_ancom = MetaHit2_ancom,
PRISM_ancom = PRISM_ancom)
# Apply the selection operation to each data frame in the list
df_list <- lapply(df_list, function(df) {
df |> select(where(~ !all(.x == 0, na.rm = TRUE)))
})
list2env(df_list, envir = .GlobalEnv)
#View(df_list$MetaHit2_ancom)
feature.table <- lapply(df_list, function(df) {
# Convert columns (except the first 9) to numeric
df[, -c(1:9)] <- lapply(df[, -c(1:9)], function(x) as.numeric(as.character(x)))
# Transpose the data frame
transposed_df <- t(df)
# Convert the transposed matrix back to a data frame
transposed_df <- as.data.frame(transposed_df, stringsAsFactors = FALSE)
# Remove columns where all values are 0
cleaned_df <- transposed_df %>%
select(where(~ !all(.x == 0, na.rm = TRUE)))
return(cleaned_df)
})
# Update the environment with transposed data frames
list2env(feature.table, envir = .GlobalEnv)
meta.data <- df_list$IBD_1000_amcom
meta.data$Disease <- as.character(meta.data$Disease )
pander(table(meta.data$Disease))
obs.abn <- feature.table$IBD_1000_amcom
meta.data$Sample_ID=seq(nrow(meta.data))
colnames(obs.abn)=seq(nrow(meta.data))
dim(meta.data)
dim(feature.table)
feature.table=obs.abn; sample.var="Sample_ID"; group.var="Disease";
feature.table = as.data.frame(sapply(feature.table, as.numeric))
dim(meta.data)
dim(feature.table)
zero.cut=0.90; lib.cut=1000; neg.lb=TRUE
pre.process=feature_table_pre_process(feature.table, meta.data, sample.var, group.var,
zero.cut, lib.cut, neg.lb)
meta.data <- df_list$IBD_1000_amcom
meta.data$Disease <- as.character(meta.data$Disease )
pander(table(meta.data$Disease))
obs.abn <- feature.table$IBD_1000_amcom[9:nrow(feature.table$IBD_1000_amcom),]
America_non <- meta_data %>% filter(Country_gro%in%c("America"),(Disease%in%c("nonIBD")))
Europe_non <- meta_data %>% filter(Country_gro%in%c("Europe"),(Disease%in%c("nonIBD")))
IBD_1000_amcom <- meta_data %>% filter(Source%in%c("IBD_1000"), (Disease%in%c("CD", "UC")))
IBD_1000_amcom <- bind_rows(IBD_1000_amcom, Europe_non)
IBD_1000_amcom <- IBD_1000_amcom |> mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
Eran_Elinav_amcom_America <- meta_data %>% filter(Source%in%c("Eran_Elinav"), Country_gro%in%c("America"), (Disease%in%c("CD", "UC")))
Eran_Elinav_amcom_Europe <- meta_data %>% filter(Source%in%c("Eran_Elinav"), Country_gro%in%c("Europe"), (Disease%in%c("CD", "UC")))
Eran_Elinav_amcom_America <- bind_rows(Eran_Elinav_amcom_America, America_non)
Eran_Elinav_amcom_America <- Eran_Elinav_amcom_America |> mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
Eran_Elinav_amcom_Europe <- bind_rows(Eran_Elinav_amcom_Europe, Europe_non)
Eran_Elinav_amcom_Europe <- Eran_Elinav_amcom_Europe |> mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
HMP2_pilot_ancom <- meta_data %>% filter(Source%in%c("HMP2_pilot"), (Disease%in%c("CD", "UC")))
HMP2_pilot_ancom <- bind_rows(HMP2_pilot_ancom, America_non)
HMP2_pilot_ancom <- HMP2_pilot_ancom |> mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
ibdmdb_ancom <- meta_data %>% filter(Source%in%c("ibdmdb"), (Disease%in%c("CD", "UC")))
ibdmdb_ancom <- bind_rows(ibdmdb_ancom, America_non)
ibdmdb_ancom <- ibdmdb_ancom |> mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
ibdmdb2_ancom <- meta_data %>% filter(Source%in%c("ibdmdb2"), (Disease%in%c("CD", "UC")))
ibdmdb2_ancom <- bind_rows(ibdmdb2_ancom, America_non)
ibdmdb2_ancom <- ibdmdb2_ancom |> mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
Lewis_ancom <- meta_data %>% filter(Source%in%c("Lewis"), (Disease%in%c("CD")))
Lewis_ancom <- bind_rows(Lewis_ancom, America_non)
Lewis_ancom <- Lewis_ancom |> mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
MetaHit_ancom <- meta_data %>% filter(Source%in%c("MetaHit"), (Disease%in%c("CD", "UC")))
MetaHit_ancom <- bind_rows(MetaHit_ancom, Europe_non)
MetaHit_ancom <- MetaHit_ancom |> mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
MetaHit2_ancom <- meta_data %>% filter(Source%in%c("MetaHit2"), (Disease%in%c("CD", "UC")))
MetaHit2_ancom <- bind_rows(MetaHit2_ancom, Europe_non)
MetaHit2_ancom <- MetaHit2_ancom |> mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
PRISM_ancom <- meta_data %>% filter(Source%in%c("PRISM"), (Disease%in%c("CD", "UC")))
PRISM_ancom <- bind_rows(PRISM_ancom, America_non)
PRISM_ancom <- PRISM_ancom |> mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
df_list <- list(IBD_1000_amcom = IBD_1000_amcom,
Eran_Elinav_amcom_America = Eran_Elinav_amcom_America,
Eran_Elinav_amcom_Europe = Eran_Elinav_amcom_Europe,
HMP2_pilot_ancom = HMP2_pilot_ancom,
ibdmdb_ancom = ibdmdb_ancom,
ibdmdb2_ancom = ibdmdb2_ancom,
Lewis_ancom = Lewis_ancom,
MetaHit_ancom = MetaHit_ancom,
MetaHit2_ancom = MetaHit2_ancom,
PRISM_ancom = PRISM_ancom)
# Apply the selection operation to each data frame in the list
df_list <- lapply(df_list, function(df) {
df |> select(where(~ !all(.x == 0, na.rm = TRUE)))
})
list2env(df_list, envir = .GlobalEnv)
#View(df_list$MetaHit2_ancom)
feature.table <- lapply(df_list, function(df) {
# Convert columns (except the first 9) to numeric
df[, -c(1:9)] <- lapply(df[, -c(1:9)], function(x) as.numeric(as.character(x)))
# Transpose the data frame
transposed_df <- t(df)
# Convert the transposed matrix back to a data frame
transposed_df <- as.data.frame(transposed_df, stringsAsFactors = FALSE)
# Remove columns where all values are 0
cleaned_df <- transposed_df %>%
select(where(~ !all(.x == 0, na.rm = TRUE)))
return(cleaned_df)
})
# Update the environment with transposed data frames
list2env(feature.table, envir = .GlobalEnv)
meta.data <- df_list$IBD_1000_amcom
meta.data$Disease <- as.character(meta.data$Disease )
pander(table(meta.data$Disease))
obs.abn <- feature.table$IBD_1000_amcom[9:nrow(feature.table$IBD_1000_amcom),]
feature.table = as.data.frame(sapply(feature.table, as.numeric))
feature.table = obs.abn; sample.var="Sample_ID"; group.var="Disease";
zero.cut=0.90; lib.cut=1000; neg.lb=TRUE
pre.process=feature_table_pre_process(feature.table, meta.data, sample.var, group.var,
zero.cut, lib.cut, neg.lb)
source("~/metaanalysis/datasets/ANCOM/bc.R")
pre.process=feature_table_pre_process(feature.table, meta.data, sample.var, group.var,
zero.cut, lib.cut, neg.lb)
# Chunk 1: setup
rm(list = ls())
library(reticulate)
library(readxl)
library(tidyverse)
library(nloptr)
# library(phyloseq)
library(stringr)
library(ggpubr)
library(magrittr)
library(qwraps2)
library(pander)
panderOptions('table.caption.prefix', NULL)
panderOptions('table.continues', NULL)
panderOptions('table.emphasize.rownames', FALSE)
source("~/metaanalysis/datasets/ancom_bc.R")
source("~/metaanalysis/datasets/ANCOM/ancom_bc.R")
# Chunk 1: setup
rm(list = ls())
library(reticulate)
library(readxl)
library(tidyverse)
library(nloptr)
# library(phyloseq)
library(stringr)
library(ggpubr)
library(magrittr)
library(qwraps2)
library(pander)
panderOptions('table.caption.prefix', NULL)
panderOptions('table.continues', NULL)
panderOptions('table.emphasize.rownames', FALSE)
source("~/metaanalysis/datasets/ANCOM/ancom_bc.R")
# Chunk 2
import pandas as pd
reticulate::repl_python()
